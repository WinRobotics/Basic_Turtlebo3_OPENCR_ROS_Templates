
#include <ros.h>
#include <std_msgs/String.h>
#include <std_msgs/Byte.h>
#include <std_msgs/UInt8.h>
#include <DynamixelSDK.h>

/******************Control Table Address**********************/
#define ADDR_PRO_TORQUE_ENABLE          64                 // Control table address is different in Dynamixel model
#define ADDR_PRO_GOAL_POSITION          116
#define ADDR_PRO_PRESENT_POSITION       132

// Protocol version
#define PROTOCOL_VERSION                2.0                 // See which protocol version is used in the Dynamixel

// Default setting
#define DXL_ID                          1                   // Dynamixel ID: 1
#define DXL2_ID                         2                   // Dynamixel ID: 2
#define BAUDRATE                        1000000
#define DEVICENAME                      "OpenCR"   // This definition only has a symbolic meaning and does not affect to any functionality

#define TORQUE_ENABLE                   1                   // Value for enabling the torque
#define TORQUE_DISABLE                  0                   // Value for disabling the torque
#define DXL_MINIMUM_POSITION_VALUE      0             // Dynamixel will rotate between this value
#define DXL_MAXIMUM_POSITION_VALUE      3500             // and this value (note that the Dynamixel would not move when the position value is out of movable range. Check e-manual about the range of the Dynamixel you use.)
#define DXL_MOVING_STATUS_THRESHOLD     20                  // Dynamixel moving status threshold

#define ESC_ASCII_VALUE                 0x1b

#define CMD_SERIAL                      Serial




//init motor drivers
//int index = 0;
int dxl_comm_result = COMM_TX_FAIL;             // Communication result

bool status_feedback;
uint8_t dxl_error = 0;                          // Dynamixel error
int32_t dxl_present_position = 1920;               // Present position


/******************Control Table Address**********************/

// Global declaration of node
ros::NodeHandle  nh;


/******************Publisher std_msgs**********************/

std_msgs::UInt8 fb;


/******************Publisher std_msgs**********************/


/******************Init ros::puiblisher**********************/

ros::Publisher feedback("fb_pub", &fb);

/******************Init ros::puiblisher**********************/


/******************Subscriber******************************/
void messageCb( const std_msgs::UInt8& sub1) {
  int i;
  fb.data = sub1.data;
  feedback.publish(&fb);
  
  
  
  

}

ros::Subscriber<std_msgs::UInt8> sub("sub1", messageCb );

/******************Subscriber******************************/


void setup() {

  nh.initNode();
  nh.subscribe(sub);
  nh.advertise(feedback);

  
dynamixel::PortHandler *portHandler = dynamixel::PortHandler::getPortHandler(DEVICENAME);
dynamixel::PacketHandler *packetHandler = dynamixel::PacketHandler::getPacketHandler(PROTOCOL_VERSION);

//Setting serial comms for OpenCR
status_feedback=portHandler->openPort();
portHandler->setBaudRate(BAUDRATE);

//Enable torque of motor 1&2
dxl_comm_result = packetHandler->write1ByteTxRx(portHandler, DXL2_ID, ADDR_PRO_TORQUE_ENABLE, TORQUE_ENABLE, &dxl_error);
//dxl_comm_result = packetHandler->write1ByteTxRx(portHandler, DXL_ID, ADDR_PRO_TORQUE_ENABLE, TORQUE_ENABLE, &dxl_error);

}

void loop() {
  nh.spinOnce();
}
